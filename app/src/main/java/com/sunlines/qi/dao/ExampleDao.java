package com.sunlines.qi.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sunlines.qi.entity.Example;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXAMPLE".
*/
public class ExampleDao extends AbstractDao<Example, Long> {

    public static final String TABLENAME = "EXAMPLE";

    /**
     * Properties of entity Example.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Example1 = new Property(1, String.class, "example1", false, "EXAMPLE1");
        public final static Property Example2 = new Property(2, int.class, "example2", false, "EXAMPLE2");
        public final static Property Example3 = new Property(3, float.class, "example3", false, "EXAMPLE3");
        public final static Property Example4 = new Property(4, double.class, "example4", false, "EXAMPLE4");
        public final static Property Example5 = new Property(5, boolean.class, "example5", false, "EXAMPLE5");
        public final static Property Example6 = new Property(6, short.class, "example6", false, "EXAMPLE6");
    }


    public ExampleDao(DaoConfig config) {
        super(config);
    }
    
    public ExampleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXAMPLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"EXAMPLE1\" TEXT," + // 1: example1
                "\"EXAMPLE2\" INTEGER NOT NULL ," + // 2: example2
                "\"EXAMPLE3\" REAL NOT NULL ," + // 3: example3
                "\"EXAMPLE4\" REAL NOT NULL ," + // 4: example4
                "\"EXAMPLE5\" INTEGER NOT NULL ," + // 5: example5
                "\"EXAMPLE6\" INTEGER NOT NULL );"); // 6: example6
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXAMPLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Example entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String example1 = entity.getExample1();
        if (example1 != null) {
            stmt.bindString(2, example1);
        }
        stmt.bindLong(3, entity.getExample2());
        stmt.bindDouble(4, entity.getExample3());
        stmt.bindDouble(5, entity.getExample4());
        stmt.bindLong(6, entity.getExample5() ? 1L: 0L);
        stmt.bindLong(7, entity.getExample6());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Example entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String example1 = entity.getExample1();
        if (example1 != null) {
            stmt.bindString(2, example1);
        }
        stmt.bindLong(3, entity.getExample2());
        stmt.bindDouble(4, entity.getExample3());
        stmt.bindDouble(5, entity.getExample4());
        stmt.bindLong(6, entity.getExample5() ? 1L: 0L);
        stmt.bindLong(7, entity.getExample6());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Example readEntity(Cursor cursor, int offset) {
        Example entity = new Example( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // example1
            cursor.getInt(offset + 2), // example2
            cursor.getFloat(offset + 3), // example3
            cursor.getDouble(offset + 4), // example4
            cursor.getShort(offset + 5) != 0, // example5
            cursor.getShort(offset + 6) // example6
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Example entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setExample1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExample2(cursor.getInt(offset + 2));
        entity.setExample3(cursor.getFloat(offset + 3));
        entity.setExample4(cursor.getDouble(offset + 4));
        entity.setExample5(cursor.getShort(offset + 5) != 0);
        entity.setExample6(cursor.getShort(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Example entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Example entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Example entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
